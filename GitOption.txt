SVN uses a single central repository to serve as the communication hub for developers, 
and collaboration takes place by passing changesets between the developers’ working copies and the central repository.
This is different from Git’s collaboration model, which gives every developer their own copy of the repository, 
complete with its own local history and branch structure.
Users typically need to share a series of commits rather than a single changeset.
Instead of committing a changeset from a working copy to the central repository, Git lets you share entire branches between repositories.

git remote
The git remote command lets you create, view, and delete connections to other repositories.
Usage	-
git remote
List the remote connections you have to other repositories.
git remote -v
Same as the above command, but include the URL of each connection.
git remote add <name> <url>
Create a new connection to a remote repository. After adding a remote, you’ll be able to use <name> as a convenient shortcut for <url> in other Git commands.
git remote rm <name>
Remove the connection to the remote repository called <name>.
git remote rename <old-name> <new-name>
Rename a remote connection from <old-name> to <new-name>.
Discussion	-
Git is designed to give each developer an entirely isolated development environment. 
This means that information is not automatically passed back and forth between repositories. 
Instead, developers need to manually pull upstream commits into their local repository or manually push their local commits back up to the central repository. The git remote command is really just an easier way to pass URLs to these "sharing" commands.
The origin Remote	-
When you clone a repository with git clone, it automatically creates a remote connection called origin pointing back to the cloned repository.
Repository URLs		-
Git supports many ways to reference a remote repository. 
Two of the easiest ways to access a remote repo are via the HTTP and the SSH protocols. 
HTTP is an easy way to allow anonymous, read-only access to a repository.
http://host/path/to/repo.git
But, it’s generally not possible to push commits to an HTTP address (you wouldn’t want to allow anonymous pushes anyways). 
For read-write access, you should use SSH instead:
ssh://user@host/path/to/repo.git
You’ll need a valid SSH account on the host machine, but other than that, Git supports authenticated access via SSH out of the box.

Pull		
Usage	-
Merging upstream changes into your local repository is a common task in Git-based collaboration workflows. 
We already know how to do this with git fetch followed by git merge, but git pull rolls this into a single command.
git pull <remote>
Fetch the specified remote’s copy of the current branch and immediately merge it into the local copy. 
This is the same as git fetch <remote> followed by git merge origin/<current-branch>.
git pull --rebase <remote>
Same as the above command, but instead of using git merge to integrate the remote branch with the local one, use git rebase.
Discussion	-
You can think of git pull as Git's version of svn update. 
It’s an easy way to synchronize your local repository with upstream changes. 
Pulling via Rebase (Instead Merge)	-
I want to put my changes on top of what everybody else has done." 
In this sense, using git pull with the --rebase flag is even more like svn update than a plain git pull.
In fact, pulling with --rebase is such a common workflow that there is a dedicated configuration option for it:
git config --global branch.autosetuprebase always
After running that command, all git pull commands will integrate via git rebase instead of git merge.

Fetch
The git fetch command imports commits from a remote repository into your local repo. 
The resulting commits are stored as remote branches instead of the normal local branches that we’ve been working with. 
This gives you a chance to review changes before integrating them into your copy of the project.
Usage
git fetch <remote>
Fetch all of the branches from the repository. 
This also downloads all of the required commits and files from the other repository.
git fetch <remote> <branch>
Same as the above command, but only fetch the specified branch.
Discussion	-
Fetching is what you do when you want to see what everybody else has been working on. 
Since fetched content is represented as a remote branch, it has absolutely no effect on your local development work. 
This makes fetching a safe way to review commits before integrating them with your local repository. 
It’s similar to svn update in that it lets you see how the central history has progressed, 
	but it doesn’t force you to actually merge the changes into your repository.
Remote Branches		-
Remote branches are just like local branches, except they represent commits from somebody else’s repository. 
You can check out a remote branch just like a local one, but this puts you in a detached HEAD state (just like checking out an old commit). 
You can think of them as read-only branches. 
To view your remote branches, simply pass the -r flag to the git branch command. 
Remote branches are prefixed by the remote they belong to so that you don’t mix them up with local branches. 
For example, the next code snippet shows the branches you might see after fetching from the origin remote:
git branch -r # origin/master # origin/develop # origin/some-feature
Again, you can inspect these branches with the usual git checkout and git log commands. 
If you approve the changes a remote branch contains, you can merge it into a local branch with a normal git merge. 
So, unlike SVN, synchronizing your local repository with a remote repository is actually a two-step process: fetch, then merge.
Examples	-
git fetch origin
This will display the branches that were downloaded:
a1e8fb5..45e66a4 master -> origin/master a1e8fb5..9e8ab1c develop -> origin/develop * [new branch] some-feature -> origin/some-feature
To see what commits have been added to the upstream master, you can run a git log using origin/master as a filter
git log --oneline master..origin/master
To approve the changes and merge them into your local master branch with the following commands:
git checkout master git log origin/master
Then we can use git merge origin/master
git merge origin/master
The origin/master and master branches now point to the same commit, and you are synchronized with the upstream developments.

Push
Pushing is how you transfer commits from your local repository to a remote repo. 
It's the counterpart to git fetch, but whereas fetching imports commits to local branches, pushing exports commits to remote branches. 
This has the potential to overwrite changes.
Usage
git push <remote> <branch>
Push the specified branch to <remote>, along with all of the necessary commits and internal objects. 
This creates a local branch in the destination repository. 
To prevent you from overwriting commits, Git won’t let you push when it results in a non-fast-forward merge in the destination repository.
git push <remote> --force
Same as the above command, but force the push even if it results in a non-fast-forward merge.
git push <remote> --all
Push all of your local branches to the specified remote.
git push <remote> --tags
Tags are not automatically pushed when you push a branch or use the --all option. The --tags flag sends all of your local tags to the remote repository.
Force Pushing
Git prevents you from overwriting the central repository’s history by refusing push requests when they result in a non-fast-forward merge. 
So, if the remote history has diverged from your history, you need to pull the remote branch and merge it into your local one, then try pushing again.
The --force flag overrides this behavior and makes the remote repository’s branch match your local one, 
deleting any upstream changes that may have occurred since you last pulled.
However, you must be absolutely certain that none of your teammates have pulled those commits before using the --force option.

Diff
Show the difference of non commited things.

Diff with previous version
show last commit things.

Show log
show commits of that branch.

Show Reflog
Browse Reference
Daemon
Revision graph
Repo-browser
Check for modifications
Rebase
Stash Save
Bisect start
Resolve
Revert
Clean-up
Switch/Checkout
Merge
Create Branch
Create Tag
Export
Add
Submodule Add
Create Patch Serial
Apply Patch Serial
Settings

3005/2000024130/00/0000046764
	13022025 - Bajaj Allizan